#!/usr/bin/env ruby
# Standard Libraries
require 'digest'
# Gems
require 'help_parser'
require 'user_space'
require 'base_convert'
# This Gem
require 'otpr'

USERSPACE = USER_SPACE::UserSpace.new
if USERSPACE.config? # file exists
  USERSPACE.config.each{|opt, value| OTPR::CONFIG[opt.to_sym] = value}
else
  STDERR.puts OTPR::CONFIG[:writting] + USERSPACE.config_file_name
  USERSPACE.config = OTPR::CONFIG
end

SALTFILE = File.join USERSPACE.cachedir, 'salt'
unless File.exist? SALTFILE
  STDERR.puts OTPR::CONFIG[:writting] + SALTFILE
  File.open(SALTFILE, 'w', 0600){|f| f.write OTPR::Entropy.computer.to(:qgraph)}
end
SALT = File.read SALTFILE

def assert(b, comment)
  unless b # This is a sanity check.
    STDERR.puts OTPR::CONFIG[comment] || comment
    exit 76 # ProtocolError: This error really should not be possible.
  end
end

def assert_equal(a, b, comment)
  assert(a==b, comment)
end

begin
  OPTIONS = HELP_PARSER::HelpParser.new(OTPR::VERSION, OTPR::CONFIG[:help])

  MEDIA = OPTIONS[:media, OTPR::CONFIG[:media]]
  OTPR::Error.raise(:media_not_found) unless File.exist? MEDIA
  MEDIA_CACHE = File.join MEDIA, '.otpr'
  Dir.mkdir(MEDIA_CACHE, 0700) unless File.exist? MEDIA_CACHE
  assert File.directory?(MEDIA_CACHE), "Not a directory:#{MEDIA_CACHE}"

  CLEAR = OPTIONS[:clear, OTPR::CONFIG[:clear], true]

  pin        = (OPTIONS[:batch])? STDIN.gets.strip : OTPR::Pin.gets
  system('clear') if CLEAR
  passphrase = SALT+pin
  otpr       = OTPR::Otpr.new(passphrase, USERSPACE.cachedir, MEDIA_CACHE)

  if OPTIONS[:init]
    # Lets get some entropy.
    qrand = (OPTIONS[:batch])?
      OTPR::Entropy.computer.to(:qgraph) :
      OTPR::Entropy.redundant.to(:qgraph)
    system('clear') if CLEAR
    otpr.set qrand
    assert_equal(otpr.get, qrand, :could_not_set)
    puts qrand
  elsif OPTIONS[:set]
    options = {
      :enter_pin      => OTPR::CONFIG[:enter_secret],
      :repeat_pin     => OTPR::CONFIG[:repeat_secret],
      :pin_validation => OTPR::CONFIG[:secret_validation],
      :pin_not_valid  => OTPR::CONFIG[:secret_not_valid],
    }
    qrand = (OPTIONS[:batch])? STDIN.gets.strip : OTPR::Pin.gets(options)
    system(clear) if CLEAR
    otpr.set qrand
    assert_equal(otpr.get, qrand, :could_not_set)
    puts qrand
  else
    qrand = otpr.get
    puts qrand
    if OPTIONS[:regen]
      otpr.set(qrand)
      assert_equal(otpr.get, qrand, :could_not_set)
    end
  end

rescue OTPR::Error
  puts $!.message
  # Most likely a user fixable failure.
  # Maybe the user forgot to insert the media.
  # So categorized here as a TempFail.
  exit 75
rescue HELP_PARSER::UsageException
  puts $!.message
  exit 0
rescue HELP_PARSER::UsageError
  STDERR.puts $!.message
  exit 64
end
