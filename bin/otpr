#!/usr/bin/env ruby
# Standard Libraries
require 'digest'
# Gems
require 'help_parser'
require 'user_space'
require 'base_convert'
# This Gem
require 'otpr'

def assert(b, comment)
  unless b # This is a sanity check.
    STDERR.puts OTPR::CONFIG[comment] || comment
    exit 76 # ProtocolError: This error really should not be possible.
  end
end

def assert_equal(a, b, comment)
  assert(a==b, comment)
end

def ask(question)
  print question
  STDIN.gets.strip
end

def get_pin
  pin = (OPTIONS[:batch])? STDIN.gets.strip : OTPR::Pin.gets
  system('clear') if CLEAR
  return pin
end

def user_secret
  options = {
    :enter_pin      => OTPR::CONFIG[:enter_secret],
    :repeat_pin     => OTPR::CONFIG[:repeat_secret],
    :pin_validation => OTPR::CONFIG[:secret_validation],
    :pin_not_valid  => OTPR::CONFIG[:secret_not_valid],
  }
  secret = (OPTIONS[:batch])?  STDIN.gets.strip : OTPR::Pin.gets(options)
  system(clear) if CLEAR
  return secret
end

def computer_random
  return OTPR::Entropy.computer.to(:qgraph) if OPTIONS[:batch]
  random = OTPR::Entropy.redundant.to(:qgraph)
  system('clear') if CLEAR
  return random
end

def get_secret
  (OPTIONS[:random])? computer_random : user_secret
end


USERSPACE = USER_SPACE::UserSpace.new
if USERSPACE.config? # file exists
  USERSPACE.config.each{|opt, value| OTPR::CONFIG[opt.to_sym] = value}
else
  STDERR.puts OTPR::CONFIG[:writting] + USERSPACE.config_file_name
  USERSPACE.config = OTPR::CONFIG
end

SALTFILE = File.join USERSPACE.cachedir, 'salt'
unless File.exist? SALTFILE
  STDERR.puts OTPR::CONFIG[:writting] + SALTFILE
  File.open(SALTFILE, 'w', 0600){|f| f.write OTPR::Entropy.computer.to(:qgraph)}
end
SALT = File.read SALTFILE

begin
  OPTIONS = HELP_PARSER::HelpParser.new(OTPR::VERSION, OTPR::CONFIG[:help])

  CLEAR = OPTIONS[:clear, OTPR::CONFIG[:clear], true]

  MEDIA = OPTIONS[:media, OTPR::CONFIG[:media]]
  OTPR::Error.raise(:media_not_found) unless File.exist? MEDIA
  MEDIA_CACHE = File.join MEDIA, '.otpr'
  Dir.mkdir(MEDIA_CACHE, 0700) unless File.exist? MEDIA_CACHE
  assert File.directory?(MEDIA_CACHE), "Not a directory:#{MEDIA_CACHE}"

  unless [:c,:r,:u,:d,:s,:C,:M,:erase].inject(false){|b,k| b^OPTIONS[k]}
    OPTIONS.usage_error(:choose_one) 
  end

  if OPTIONS[:erase]
    if ask(OTPR::CONFIG[:confirm_erase])==OTPR::CONFIG[:y]
      Dir.glob(File.join(MEDIA_CACHE, '*')).each do |filename|
        # Don't know why there would be anything but regular file, but...
        File.unlink(filename) if File.file?(filename)
        # TODO: report on no files found.
      end
      Dir.glob(File.join(USERSPACE.cachedir, '*')).each do |filename|
        # I mean, really, why would there be anything but regular files?
        File.unlink(filename) if File.file?(filename)
      end
    end
    exit
  end

  otpr = OTPR::Otpr.new(SALT+get_pin, MEDIA_CACHE, USERSPACE.cachedir)

  if OPTIONS[:create]
    OPTIONS.usage_error(:pin_exist) if otpr.exist?
    secret = get_secret
    otpr.set secret
    assert_equal(otpr.get, secret, :could_not_set)
    puts secret
    exit
  end

  if OPTIONS[:update]
    OPTIONS.usage_error(:pin_does_not_exist) unless otpr.exist?
    puts otpr.get unless OPTIONS[:batch]
    secret = get_secret
    otpr.set secret
    assert_equal(otpr.get, secret, :could_not_set)
    puts secret
    exit
  end

  if OPTIONS[:copy] or OPTIONS[:move]
    OPTIONS.usage_error(:pin_does_not_exist) unless otpr.exist?
    otpr2 = OTPR::Otpr.new(SALT+get_pin, USERSPACE.cachedir, MEDIA_CACHE)
    OPTIONS.usage_error(:pin_exists) unless OPTIONS[:overwrite] or !otpr2.exist?
    secret = otpr.get
    otpr2.set secret
    assert_equal(otpr2.get, secret, :could_not_set)
    otpr.delete if OPTIONS[:move]
    puts secret
    exit
  end

  if OPTIONS[:delete]
    OPTIONS.usage_error(:pin_does_not_exist) unless otpr.exist?
    confirmed = true
    unless OPTIONS[:batch]
      puts otpr.get
      confirmed = ask(OTPR::CONFIG[:confirm_delete])==OTPR::CONFIG[:y]
    end
    otpr.delete if confirmed
    exit
  end

  if OPTIONS[:read]
    OPTIONS.usage_error(:pin_does_not_exist) unless otpr.exist?
    secret = otpr.get
    puts secret
    if OPTIONS[:regen]
      otpr.set secret
      assert_equal(otpr.get, secret, :could_not_set)
    end
    exit
  end

  if OPTIONS[:status]
    if otpr.exist?
      puts 'OK'
      exit 0
    elsif otpr.inconsistent?
      puts 'INCONSISTENT'
      exit 76 # Protocol error, should not be possible.
    else
      puts 'NOT FOUND'
      exit 66 # No Input error code
    end
  end

  assert(false, :unexpected_program_flow)

rescue OTPR::Error
  puts $!.message
  # Most likely a user fixable failure.
  # Maybe the user forgot to insert the media.
  # So categorized here as a TempFail.
  exit 75
rescue HELP_PARSER::UsageException
  puts $!.message
  exit 0
rescue HELP_PARSER::UsageError
  STDERR.puts $!.message
  exit 64
end
