#!/usr/bin/env ruby

# Gems
require 'help_parser'
require 'user_space'

# This Gem
require 'otpr'
include OTPR
extend  Helpers

USERSPACE = USER_SPACE::UserSpace.new
USERSPACE.trace = STDERR
USERSPACE.configures(CONFIG)

# This is an undocumented flag.
# If the very first argument is a -t,
# we're running in test mode.
if ARGV[0]=='-t'
  ARGV.shift
  CONFIG[:test_mode] = true
end

begin
  OPTIONS = HELP_PARSER::HelpParser.new(VERSION, CONFIG[:help])
  # User must state intent
  unless [
    :c,:r,:u,:d,:s,
    :C,:M, :erase,:regen_all,
    :remove_unpaired, :remove_unpaired_keys, :remove_unpaired_files,
    ].inject(false){|b,k| b^OPTIONS[k]}
    OPTIONS.usage_error(:choose_one) 
  end
  # OPTIONS overwrites keys in CONFIG
  CONFIG.keys.each do |key|
    CONFIG[key] = OPTIONS[key] unless OPTIONS[key].nil?
  end

  # Ensure the removable media
  raise OTPR::Error, :media_not_found unless File.exist? CONFIG[:media]
  raise OTPR::Error, :media_not_a_directory unless File.directory? CONFIG[:media]
  MEDIA_CACHE = File.join CONFIG[:media], '.otpr'
  Dir.mkdir(MEDIA_CACHE, 0700) unless File.exist? MEDIA_CACHE
  assert File.directory?(MEDIA_CACHE), "Not a directory:#{MEDIA_CACHE}"

  a, k, f = OPTIONS[:remove_unpaired], OPTIONS[:remove_unpaired_keys], OPTIONS[:remove_unpaired_files]
  if a or k or f
    if ask(CONFIG[:confirm_remove_unpaired])==CONFIG[:y]
      delete_unpaired(MEDIA_CACHE, USERSPACE.cachedir) if a or k
      delete_unpaired(USERSPACE.cachedir, MEDIA_CACHE) if a or f
      puts CONFIG[:ok]
    else
      puts CONFIG[:cancelled]
    end
    exit
  end

  # Deletes all files in media, and its' pair in cache.
  if OPTIONS[:erase]
    if ask(CONFIG[:confirm_erase])==CONFIG[:y]
      delete_pins(MEDIA_CACHE, USERSPACE.cachedir)
      puts CONFIG[:ok]
    else
      puts CONFIG[:cancelled]
    end
    exit
  end

  # Re-encripts all pins
  if OPTIONS[:regen_all]
    regen_pins(MEDIA_CACHE, USERSPACE.cachedir)
    puts CONFIG[:ok]
    exit
  end

  # Otp object from pin. Verify that it has the 2 split keys (or none).
  otpr = Otpr.new(get_pin, MEDIA_CACHE, USERSPACE.cachedir)
  refute(otpr.inconsistent?, :pin_inconsistent) unless OPTIONS[:status]

  # Creates the new pin.
  if OPTIONS[:create]
    OPTIONS.usage_error(:pin_exist) if otpr.exist?
    secret = get_secret
    otpr.set secret
    assert_equal(otpr.get, secret, :could_not_set)
    puts secret if CONFIG[:show_secret]
    exit
  end

  # Updates an existing pin.
  if OPTIONS[:update]
    OPTIONS.usage_error(:pin_does_not_exist) unless otpr.exist?
    puts otpr.get if CONFIG[:show_secret] and not CONFIG[:batch]
    secret = get_secret
    otpr.set secret
    assert_equal(otpr.get, secret, :could_not_set)
    puts secret if CONFIG[:show_secret]
    exit
  end

  # Copies or moves an existing pin.
  if OPTIONS[:copy] or OPTIONS[:move]
    OPTIONS.usage_error(:pin_does_not_exist) unless otpr.exist?
    otpr2 = Otpr.new(get_pin, MEDIA_CACHE, USERSPACE.cachedir)
    OPTIONS.usage_error(:pin_exists) unless CONFIG[:overwrite] or !otpr2.exist?
    secret = otpr.get
    otpr2.set secret
    assert_equal(otpr2.get, secret, :could_not_set)
    otpr.delete if OPTIONS[:move]
    puts secret if CONFIG[:show_secret]
    exit
  end

  # Deletes an existing pin.
  if OPTIONS[:delete]
    OPTIONS.usage_error(:pin_does_not_exist) unless otpr.exist?
    confirmed = true
    unless CONFIG[:batch]
      puts otpr.get if CONFIG[:show_secret]
      confirmed = ask(CONFIG[:confirm_delete])==CONFIG[:y]
    end
    if confirmed
      otpr.delete
      puts CONFIG[:ok]
    else
      puts CONFIG[:cancelled]
    end
    exit
  end

  # Reads an existing pin.
  if OPTIONS[:read]
    OPTIONS.usage_error(:pin_does_not_exist) unless otpr.exist?
    secret = otpr.get
    puts secret
    if CONFIG[:regen]
      otpr.set secret
      assert_equal(otpr.get, secret, :could_not_set)
    end
    exit
  end

  # Status of a pin.
  if OPTIONS[:status]
    if otpr.exist?
      puts CONFIG[:ok]
      exit 0
    elsif otpr.inconsistent?
      puts CONFIG[:inconsistent]
      exit 76 # Protocol error, should not be possible.
    else
      puts CONFIG[:not_found]
      exit 66 # No Input error code
    end
  end

  assert(false, :unexpected_program_flow)

rescue OTPR::Error
  error_message
  # Most likely a user fixable failure.
  # Maybe the user forgot to insert the media.
  # So categorized here as a TempFail.
  exit 75
rescue HELP_PARSER::UsageException
  # The user just asked for either version or help.
  puts $!.message
  exit 0
rescue HELP_PARSER::UsageError
  # The user set options incorrectly.
  error_message
  exit 64
end
