#!/usr/bin/env ruby

# Gems
require 'rainbow'
require 'help_parser'
require 'user_space'

# This Gem
require 'otpr'
extend OTPR::Helpers
include OTPR

# This is an undocumented flag.
# If the very first argument is a -t,
# we're running in test mode.
if ARGV[0]=='-t'
  ARGV.shift
  T = true
else
  T = false
end

USERSPACE = USER_SPACE::UserSpace.new
USERSPACE.trace = STDERR
USERSPACE.configures(CONFIG)

begin
  OPTIONS = HELP_PARSER::HelpParser.new(VERSION, CONFIG[:help])
  unless [:c,:r,:u,:d,:s,:C,:M,:erase].inject(false){|b,k| b^OPTIONS[k]}
    OPTIONS.usage_error(:choose_one) 
  end
  CONFIG.keys.each do |key|
    CONFIG[key] = OPTIONS[key] unless OPTIONS[key].nil?
  end

  raise OTPR::Error, :media_not_found unless File.exist? CONFIG[:media]
  raise OTPR::Error, :media_not_a_directory unless File.directory? CONFIG[:media]
  MEDIA_CACHE = File.join CONFIG[:media], '.otpr'
  Dir.mkdir(MEDIA_CACHE, 0700) unless File.exist? MEDIA_CACHE
  assert File.directory?(MEDIA_CACHE), "Not a directory:#{MEDIA_CACHE}"

  SALT = get_salt(MEDIA_CACHE) + get_salt(USERSPACE.cachedir)

  if OPTIONS[:erase]
    if ask(CONFIG[:confirm_erase])==CONFIG[:y]
      delete_files_in_dir(MEDIA_CACHE, USERSPACE.cachedir)
      puts CONFIG[:ok]
    else
      puts CONFIG[:cancelled]
    end
    exit
  end

  otpr = Otpr.new(SALT+get_pin, MEDIA_CACHE, USERSPACE.cachedir)
  refute otpr.inconsistent?, :pin_inconsistent

  if OPTIONS[:create]
    OPTIONS.usage_error(:pin_exist) if otpr.exist?
    secret = get_secret
    otpr.set secret
    assert_equal(otpr.get, secret, :could_not_set)
    puts secret
    exit
  end

  if OPTIONS[:update]
    OPTIONS.usage_error(:pin_does_not_exist) unless otpr.exist?
    puts otpr.get unless CONFIG[:batch]
    secret = get_secret
    otpr.set secret
    assert_equal(otpr.get, secret, :could_not_set)
    puts secret
    exit
  end

  if OPTIONS[:copy] or OPTIONS[:move]
    OPTIONS.usage_error(:pin_does_not_exist) unless otpr.exist?
    otpr2 = Otpr.new(SALT+get_pin, MEDIA_CACHE, USERSPACE.cachedir)
    OPTIONS.usage_error(:pin_exists) unless CONFIG[:overwrite] or !otpr2.exist?
    secret = otpr.get
    otpr2.set secret
    assert_equal(otpr2.get, secret, :could_not_set)
    otpr.delete if OPTIONS[:move]
    puts secret
    exit
  end

  if OPTIONS[:delete]
    OPTIONS.usage_error(:pin_does_not_exist) unless otpr.exist?
    confirmed = true
    unless CONFIG[:batch]
      puts otpr.get
      confirmed = ask(CONFIG[:confirm_delete])==CONFIG[:y]
    end
    if confirmed
      otpr.delete
      puts CONFIG[:ok]
    else
      puts CONFIG[:cancelled]
    end
    exit
  end

  if OPTIONS[:read]
    OPTIONS.usage_error(:pin_does_not_exist) unless otpr.exist?
    secret = otpr.get
    puts secret
    if CONFIG[:regen]
      otpr.set secret
      assert_equal(otpr.get, secret, :could_not_set)
    end
    exit
  end

  if OPTIONS[:status]
    if otpr.exist?
      puts CONFIG[:ok]
      exit 0
    elsif otpr.inconsistent?
      puts CONFIG[:inconsistent]
      exit 76 # Protocol error, should not be possible.
    else
      puts CONFIG[:not_found]
      exit 66 # No Input error code
    end
  end

  assert(false, :unexpected_program_flow)

rescue OTPR::Error
  error_message
  # Most likely a user fixable failure.
  # Maybe the user forgot to insert the media.
  # So categorized here as a TempFail.
  exit 75
rescue HELP_PARSER::UsageException
  puts $!.message
  exit 0
rescue HELP_PARSER::UsageError
  error_message
  exit 64
end
