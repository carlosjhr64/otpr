#!/usr/bin/env ruby
version = '0.0.0'
help = <<EOT
Usage:	rotp bucket pad-name [backup]
Options:
	-v --version
	-h		short help
	--help		long help
	-i --init	initialize your pad
	-n --new	reset you password
EOT
more = <<EOT
GitHub page:
	https://github.com/carlosjhr64/rotp
RubyGem page:
	https://rubygems.org/gems/rotp
Google Cloud Storage
	https://developers.google.com/storage/
EOT

bucket = padname = backup = options = nil

exit_status = 0
begin
  MAP = Hash.new {|hash,k| raise "#{k} not implemented"	if k=~/^--/; k.sub(/^-+/,'') }
  MAP['--init']		= 'i'
  MAP['--new']		= 'n'
  MAP['--version']	= 'v'
  MAP['--help']		= 'H'
  # GET THE OPTIONS
  options = ARGV.select{|a| a=~/^-/}.map{|a| MAP[a]}.join
  ARGV.delete_if{|a| a=~/^-/}
  if !(options=~/[hv]/i) then
    # GIMME A BUCKET!
    bucket = ARGV.shift
    raise 'gimme a bucket!' unless bucket
    padname = ARGV.shift
    raise 'need padname' unless padname
    backup = ARGV.shift
  end
rescue Exception
  $stderr.puts $!
  exit_status = 1
  options = 'h'
ensure
  if options=~/[vh]/i then
    io = (exit_status==0)? $stdout : $stderr # If this an error, then use stderr.
    io.puts (options=~/v/i)? version : help
    io.puts more if options=~/H/
    exit exit_status
  end
end

def ask(question)
  $stdout.puts question
  $stdout.flush # :P
  answer = $stdin.gets.strip
  return answer
end

begin
  require 'rotp'
  password = ''
  rotc = ROTP.new( bucket, padname, backup )
  case options
  when /i/ # initialize
    password = rotc.initialize_pad( ask( "Access Key: " ), ask( "Secret Key: " ), ask( "Password: " ) )
  when /n/ # new password
    password = rotc.new_password( ask( "Password: " ) )
  else
    password = rotc.pin_password( ask( "Pin: " ) )
  end
  puts password
rescue Exception
  $stderr.puts $!
  exit 1
end
exit 0
